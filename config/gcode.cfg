# You need to add a certain command to your slicers start and end g-code section, so that the following macros will be loaded.  
# When using CURA, add this line to your start g-code section: START_PRINT BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0}
# When using PRUSASLICER or SUPERSLICER, add this line to your start g-code section: START_PRINT BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP=[first_layer_temperature]
# In the end g-code section of all of the abovemntioned slicers, just add this line: END_PRINT

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set RETRACT_LENGTH = params.RETRACT_LENGTH|default(0.5)|float %}
    TURN_OFF_HEATERS
    # Start bed heating
    M140 S{BED_TEMP + 20.0}
    # Use absolute coordinates
    G90
    # Home X Y
    G28 X Y
    # G0 Y222 F3000 ; Bring bed forward
    # Reset the G-Code Z offset (adjust Z offset if needed)
    # SET_GCODE_OFFSET Z=0.4
    # Load *default* bed mesh profile; if using a different name than "default", you have to set the belonging name after LOAD=...
    #BED_MESH_PROFILE LOAD=default

    # Move the nozzle near the bed
    #G1 Z5 F3000
    # G1 Z0 F3000    
    # Move the nozzle very close to the bed - I deactivated this for my personal usage
    # G1 Z0.15 F300
    # Wait for bed to reach temperature
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}
    M140 S{BED_TEMP}
    # Preheat nozzle
    #M104 S130
    # Wait 10s
    G4 P10000
    # Home Z
    G28 Z
    BED_MESH_CALIBRATE

    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    # Set nozzle temperature
    M104 S{EXTRUDER_TEMP}
    LINE_PURGE

 
[gcode_macro END_PRINT]
gcode:
    #{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(2)|float %}
    {% set PRE_PURGE_PRIME_LENGTH=5 %}
    G92 E0 ; zero the extruder
    G1 E-{PRE_PURGE_PRIME_LENGTH} F4000 ; retract filament
    # Set safe speeds
    {% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
    {% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
    {% set zVelocityAdjusted = (0.95 * zVelocity * 60)|int %}
    {% set maxVelocityAdjusted = (0.95 * maxVelocity * 60)|int %}
    # Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    # Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
    {% set x_safe = 20.0 %}
    {% else %}
    {% set x_safe = -20.0 %}
    {% endif %}
    {% if printer.toolhead.position.y < (max_y - 20) %}
    {% set y_safe = 20.0 %}
    {% else %}
    {% set y_safe = -20.0 %}
    {% endif %}
    {% set lift_height = 25.0 %}
    {% if printer.toolhead.position.z < (max_z - lift_height) %}
    {% set z_safe = lift_height %}
    {% else %}
    {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    G91 ; relative positioning
    G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted} ; move nozzle to remove stringing
    G0 Z{z_safe} F{zVelocityAdjusted} ; move nozzle up
    TURN_OFF_HEATERS
    M107 ; turn off fan
    G90 ; absolute positioning
    G0 X5 Y{max_y} F3600 ; park nozzle at rear
    M84 ; Disable stepper motors
    M220 S100 ; Reset Speed factor override percentage to default (100%)
    M221 S100 ; Reset Extrude factor override percentage to default (100%)
 
[gcode_macro start_probe]
variable_bed_temp: 0
gcode:
  # Save target temperature to bed_temp variable
  SET_GCODE_VARIABLE MACRO=start_probe VARIABLE=bed_temp VALUE={printer.heater_bed.target}
  # Disable bed heater
  M140

[gcode_macro end_probe]
gcode:
  # Restore temperature
  {% if printer["gcode_macro start_probe"].bed_temp != 0 %}
      M140 S{printer["gcode_macro start_probe"].bed_temp + 20.0}
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={printer["gcode_macro start_probe"].bed_temp}
      M140 S{printer["gcode_macro start_probe"].bed_temp}
  {% endif %}
  
[gcode_macro load_filament]
gcode:
  G90
  G92 E0
  G0 E100 F400
  G0 E110 F100
  G4 P3000
  G0 E105 F100
  M300
  
[gcode_macro unload_filament]
gcode:
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={printer.extruder.target}
  G90
  G92 E0
  G0 E-95 F1200
  M300

#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BASE_BED_MESH_CALIBRATE
#gcode:
#    {% if printer.heater_bed.target != 0 %}
#        {% set BED_TEMP = printer.heater_bed.target|float %}
#    {% else %}
#        {% set BED_TEMP = 60|float %}
#    {% endif %}
#    #before the original gcode
#    BED_MESH_CLEAR
#    # Start bed heating
#    M140 S{BED_TEMP} 
#    # Use absolute coordinates
#    G90
#    # Home X Y
#    G28 X Y
#    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}   
#    # Wait 30s
#    G4 P30000
#    # Home Z
#    G28 Z
#    #the original gcode
#    BASE_BED_MESH_CALIBRATE
#    #after the original gcode
#    M300
#    G4 P100
#    M300
#    G0 X130 Y228 Z50 F4000
#    M140
#    M18
    
[gcode_macro SCREWS_TILT_TUNE]
gcode:
  G28 X Y
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={printer.heater_bed.target}   
  # Wait 30s
  G4 P30000
  # Home Z
  G28 Z
  SCREWS_TILT_CALCULATE
  G0 X130 Y228 Z50 F4000
  M18

[idle_timeout]
gcode:
  {% if printer.pause_resume.is_paused %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  {% else %}
    M84
    TURN_OFF_HEATERS
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=60
  {% endif %}
timeout: 300

[delayed_gcode POWER_OFF_PRINTER_CHECK]
initial_duration: 0.
gcode:
 {% if printer.idle_timeout.state == "Idle" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 35.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            POWER_OFF_PRINTER
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(0)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    {% set F = params.F|default(1)|int %}
    #{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(2)|float %}
    {% set PRE_PURGE_PRIME_LENGTH=4 %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-{PRE_PURGE_PRIME_LENGTH} F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    {% if F == 1 %}
    unload_filament
    {% endif %}
    RESTORE_GCODE_STATE NAME=M600_state
 
#[delayed_gcode startup_gcode]
#initial_duration: 0.1
#gcode:
#    G28
 
#[gcode_macro POWER_OFF_PRINTER]
#gcode:
#  {action_call_remote_method(
#    "set_device_power", device="printer", state="off"
#  )}
 
#[gcode_macro POWER_ON_PRINTER]
#gcode:
#  {action_call_remote_method(
#    "set_device_power", device="printer", state="on"
#  )}
